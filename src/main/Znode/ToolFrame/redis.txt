redis
NoSQL  不仅仅是SQL
例(MemCache,Redis,MongoDB ...)
memcache 不支持持久化操作，数据结构单一，只有string类型。

        MySQL基于磁盘
  redis数据储存 内存 速度快
     存储格式 键值对
     基于乐观锁事务
     LUA脚本

应用：
缓存,
临时存储,
流式数据去重,使用Set类型存储流式数据达到去重的目的
分布式环境下解决Session不一致问题时的Session库


数据类型 String,Hash,list,set,sortedset(ZSet)


持久化：Redis 允许两者结合
RDB：每隔一段时间进行内存数据快照,异步保存在磁盘中 默认开启
启动redis服务后，可以读取磁盘中被持久化的数据
RDB持久化策略：
save 900 1  900秒内有一个key发生改变时执行序列化
save 300 10 300秒内有十个key发生改变时执行序列化
save 60 10000  60秒内有一万个key发生改变时执行序列化
    使用flushall命令
    这个命令也会产生dump.rdb文件，但里面是空的，没有意义
服务器 正常 关闭也会触发一次RDB
不能保证绝对安全
适合大规模的数据恢复，速度较快
会丢失最后一次快照之后的数据
AOF：
根据配置文件中指定的策略，把生成数据的命令保存到硬盘上的文件中
最后合并(对命令进行简化)编辑日志

显然AOF持久化数据完整性能更高，缺点是生成大量的日志文件。

实际工作中不要进行频繁的AOF重写，因为CPU资源和硬盘资源二者之间
肯定是CPU资源更加宝贵，所以不应该过多耗费CPU性能去节省硬盘空间。
AOF持久化：策略
# appendfsync always 总是序列化 理论上能够做到数据完整一致，但此时性能又不好
# appendfsync everysec
# appendfsync no

使用建议
如果Redis仅仅作为缓存可以不使用任何持久化方式。
其他应用方式综合考虑性能和完整性、一致性要求。

事务：基于乐观锁
Redis不支持回滚
1）悲观锁：认为当前环境非常容易发生碰撞，所以执行操作前需要把数据锁定，操作完成后释放锁，其他操作才可以继续操作。
2）乐观锁：认为当前环境不容易发生碰撞，所以执行操作前不锁定数据，万一碰撞真的发生了，那么放弃自己的操作。

Redis主从复制机制(相当于构建Redis集群)
读写分离
Master 写
slave 只读
哨兵模式：观察者模式
监控M/S实现主从复制自动管理
主观下线：一台sentinel检查到某节点服务器下线
客观下线：认为某节点服务器下线的哨兵数达到配置的数量(一般大于半数)


1.使用Redis存什么？
热点数据

2.类型选择问题？
K-V  redisKey(k-v)
数据量大的时候选String，String写出的K会分布到各机器
数据量小的时候选Hash，Hash会产生一个大的K只在一台机器上

3.RedisKey设计
命名时可加日期


4.现在有些公司使用redis和ssdb组合的方式。
ssdb写的效率高，redis读的效率高，两者结合可以达到优势互补的效果，但是这也依赖一个lua脚本，两者共用一套客户端（redis-cli）。
